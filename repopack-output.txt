This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-26T15:57:13.866Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
LICENSE
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.jsx
src/App.test.js
src/constants/defaults.jsx
src/index.css
src/index.js
src/logo.svg
src/middleware/api-middleware.jsx
src/middleware/requests.js
src/pages/advisors/AdvisorsPage.jsx
src/pages/advisors/components/AdvisorDetails.jsx
src/pages/advisors/components/AdvisorRecommendations.jsx
src/pages/advisors/components/AdvisorsPanel.jsx
src/pages/advisors/components/AdvisorsWidget.css
src/pages/advisors/components/AdvisorsWidget.jsx
src/pages/advisors/components/RecommendationForm.jsx
src/pages/advisors/components/Recommendations.css
src/pages/feedbackPage.jsx
src/pages/MainLandingPage.jsx
src/pages/ratemovies/components/MovieGrid.css
src/pages/ratemovies/components/MovieGrid.jsx
src/pages/ratemovies/components/MovieGridItem.jsx
src/pages/ratemovies/MovieRatingPage.jsx
src/pages/survey.jsx
src/pages/SystemIntro.jsx
src/pages/welcome.jsx
src/reportWebVitals.js
src/res/default_movie_icon.svg
src/setupTests.js
src/widgets/dialogs/informedConsent.jsx
src/widgets/headerJumbotron.jsx
src/widgets/nextButton.jsx
src/widgets/survey/likertBar.jsx
src/widgets/survey/surveyTemplate.jsx

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

*.pyc
*.py
/venv/Lib

================
File: LICENSE
================
MIT License

Copyright (c) 2023 Mehtab Iqbal (Shahan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.json
================
{
  "name": "pref-comm",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "16": "^0.0.2",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.3.0",
    "dompurify": "^3.1.6",
    "html-react-parser": "^4.2.0",
    "react": "^18.2.0",
    "react-bootstrap": "^2.7.4",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.14.2",
    "react-scripts": "^5.0.1",
    "react-star-ratings": "^2.3.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "homepage": "https://rssa.recsys.dev/preference-community",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "description": "i# Getting Started with Create React App",
  "main": "index.js",
  "keywords": [
    "rssa"
  ],
  "author": "Mehtab (Shahan) Iqbal",
  "license": "ISC"
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
i# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
# pref-comm

================
File: src/App.css
================
.App {
	text-align: center;
	min-width: 960px;
	overflow-x: scroll;
	font-size: 13px;
}

.App p {
	font-size: 13px;
}

.App h1 {
	font-size: 1.6rem !important;
}

.App h2 {
	font-size: 1.5rem;
}

.App h3 {
	font-size: 1.4rem;
}

.App h4 {
	font-size: 1.3rem;
}

.App h5  {
	font-size: 1.25rem !important;
}

.App-header {
	background-color: #282c34;
	height: 3vh;
	display: flex;
	flex-direction: column;
	align-items: flex-start;
	justify-content: center;
	font-size: calc(10px + 2vmin);
	color: white;
}

.instructionblurb {
	text-align: left;
}

.modal-80w {
	max-width: 80%;
	margin: 1.75rem auto;
}

.overviewCard {
	height: 18em;
}

/* Gallery */
.gallery {
	width: -moz-fit-content;
	width: fit-content;
	margin: 0 auto;
}

.gallery .btnDiv {
	margin-top: 0.75em;
	padding: 0;
}

.gallery .btnDiv Button {
	width: 360px;
	height: 54px;
	margin: 0;
}

.btn-ers {
	background-color: #f9b05c;
	font-weight: 400;
	color: #4a4b4b;
}

.btn-ers:hover {
	background-color: #d9903c;
	color: #4a4b4b;
}

.btn-ers:disabled {
	background-color: #c0c0c0;
	color: #4a4b4b;
	border-width: 0;
}

.btn-ers-disabled {
	background-color: #c0c0c0ee;
	color: #4a4b4b;
	border-width: 0;
	cursor: default;
}
.btn-ers-disabled:hover {
	background-color: #c0c0c0ee;
	color: #4a4b4b;
	border-width: 0;
	cursor: default;
}
.btn-ers-disabled:active {
	background-color: #c0c0c0ee !important;
	color: #4a4b4b !important;
	border-width: 0 !important;
	cursor: default !important;
}
.btn-ers-disabled:focus-visible {
	background-color: #c0c0c0ee;
	color: #4a4b4b;
	border-width: 0;
	cursor: default;
}

.btn-lg {
	padding: 0.75rem 1rem;
	font-size: 1rem;
	font-size: large;
}

.btn-ersDone {
	background-color: #39e04c;
	font-weight: 400;
	color: #4a4b4b;
	border: solid #19cf2c 1px;
}

.btn-ersDone:hover {
	background-color: #11af11;
	color: #f0f0f0;
}

.btn-ersDone:disabled {
	background-color: #c0c0c0;
	color: #4a4b4b;
	border-width: 0;
}

.btn-ersDone:active {
	background-color: #5cbf5c ! important;
	color: #4a4b4b;
	border-width: 0;
}

.btn-ersCancel {
	background-color: #c9ccd5;
	border-color: #c9ccd5;
}

.btn-ersCancel:hover {
	background-color: #8b8b8b;
	border-color: #8b8b8b;
}

.btn-ersCancel:disabled {
	background-color: #c0c0c0;
	color: #4a4b4b;
	border-width: 0;
}

.btn-ersCancel:active {
	background-color: #8b8b8b ! important;
	color: #4a4b4b;
	border-width: 0;
}

.warning-header-ers {
	background-color: #f9b05c;
	font-weight: 400;
}

.grid-container {
	display: grid;
	grid-template-columns: auto auto auto auto auto auto auto auto;
	grid-template-rows: auto auto auto;
	justify-items: stretch;
	overflow-x: hidden;
	grid-column-gap: 0.25em;
	grid-row-gap: 0.25em;
	border-radius: 0.5em;
}

.grid-item {
	position: relative;
	background-size: contain;
	background-position-x: center;
	background-position-y: top;
	background-repeat: no-repeat;
	background-color: rgba(0, 0, 0, 1.0);
	width: 117px;
	text-align: center;
	height: 153px;
}

.grid-item-label {
	background-color: black;
	color: white;
	opacity: 0.8;
	font-size: 13px;
	bottom: 0;
	text-align: center;
	vertical-align: middle;
	width: 100%;
	min-height: 50px;
	display: flex;
	z-index: 10;
	justify-content: center;
	align-content: center;
	align-items: center;
}

.grid-item:hover .overlay {
	width: 100%;
	height: 100%;
	background-color: black;
	opacity: 0.8;
}

.grid-item .rated.overlay {
	width: 100%;
	height: 100%;
	background-color: black;
	opacity: 0.8;
}

.grid-item:hover .star-div {
	z-index: 9;
	display: flex;
}

.star-div {
	height: 27px;
	justify-content: center;
	align-content: center;
	margin: 0 auto;
	padding-top: 25%;
	display: none;
}

.star-div-rated {
	height: 27px;
	justify-content: center;
	align-content: center;
	margin: 0 auto;
	padding-top: 25%;
	display: visible;
}

.jumbotron {
	padding: 1em 1rem;
	margin-bottom: 0.5rem;
	margin-top: 1.5rem;
	background-color: #e9ecef;
	border-radius: 0.3rem;
}

/* .jumbotron h1 {
	font-size: 1.8rem;
} */

.jumbotron-footer {
	float: right;
	width: 100%;
	/* margin-top: 0.5em; */
}

.rankHolder {
	width: -moz-fit-content;
	width: fit-content;
	margin: 1.6em auto 0 auto;
}

.rankHolder span {
	font-family: "Calibri", Georgia, Serif, serif;
	font-size: 1.6em;
	text-align: center;
	/* padding-top: 17px; */
}

.rankHolder span:nth-child(2) {
	color: #357df2;
	font-weight: bold;
	padding-left: 5px;
	padding-right: 5px;

}

.rankHolder span:last-child {
	font-family: "Calibri", Georgia, Serif, serif;
	font-size: 1.6em;
	text-align: center;

	color: #62656b;
}

.footer-btn {
	float: right;
}

.nextButton {
	height: fit-content;
	margin-top: 1em;
}

.emoPrefControlPanel {
	background-color: #e9ecef;
	border-radius: 0.3em;
	padding: 0.25em 1em 1em 1em;
	height: 100%;
}

.ersToggleBtn {
	background-color: #e0e0e0;
	border-color: #707070;
	color: #4a4b4b;
	font-weight: 400;
	font-size: small;
	width: 72px;
}

.ersToggleBtn.disabled {
	pointer-events: none;
	filter: none;
	opacity: .65;
	background-color: #e0e0e0 !important;
	border-color: #707070 !important;
	font-weight: 400;
	color: #4a4b4b !important;
	font-size: small;
}

.ersToggleBtn:hover {
	background-color: rgb(249, 176, 92) !important;
	color: #4a4b4b !important;
}

.ersToggleBtn.active {
	background-color: #f9b05c !important;
	color: #4a4b4b !important;
}

.ersToggleBtnChecked {
	border-color: #707070;
	font-weight: 400;
	font-size: small;
	background-color: #f9b05c !important;
	color: #4a4b4b !important;
	width: 72px;
}

.progress {
	width: 144px;
	height: 0.9em;
	border-width: 1px;
	border-color: #8b8b8b;
	border-style: solid;
	border-radius: 0.5em;
}

.sidePanelThumbnail {
	max-width: 45px;

	min-height: 67px;
}


.progress-bar {
	border-color: #8b8b8b;
	border-width: 1px;
	border-style: solid;
	border-radius: 0.5em;
}

.survey-question-block {
	padding: 0 9px 0 9px;
	border-left-width: 3px;
	border-left: darkgray;
	border-left-color: darkgray;
	border-left-style: solid;
	margin: 9px auto 0 auto;
	width: 720px;
	text-align: left;
}

.survey-question-block:nth-child(even) {
	background: linear-gradient(0.25turn,  #f2f2f2bb,  #f2f2f299, white);
}

.survey-question-block-responded {
	padding: 0 9px 0 9px;
	border-left-width: 3px;
	border-left: green;
	border-left-color: green;
	border-left-style: solid;
	margin: 9px auto 0 auto;
	width: 720px;
	text-align: left;
}

.survey-question-responded:nth-child(even) {
	background: linear-gradient(0.25turn,  #f2f2f2bb,  #f2f2f299, white);
}

.survey-question-block-unanswered {
	padding: 0 9px 0 9px;
	border-left-width: 3px;
	border-left: red;
	border-left-color: red;
	border-left-style: solid;
	margin: 9px auto 0 auto;
	width: 720px;
	text-align: left;
}

.survey-question-block:nth-child(even) {
	background: linear-gradient(0.25turn,  #f2f2f2bb,  #f2f2f299, white);
}

.surveyQuestionText {
	font-size: 1rem;
	margin-bottom: 0.5rem;
}

.surveyQuestion {
	margin: 3px 0 0 3px;
}

.radio-margin {
	margin: auto;
	margin-bottom: 3px;
}

.movieSurvey.surveyQuestion {
	margin: 0px 0 0 3px;
}

.checkboxgroup {
	display: inline-block;
	text-align: center;
}

.checkboxGroup {
	display: inline-flex;
}

.checkboxBtn {
	cursor: pointer;
	padding: 3px;
	background-color: #e0e0e0;
	border-color: #707070;
	color: #4a4b4b;
	margin: 0 9px 3px 9px;
	border-radius: 3px;
	height: 45px;
	width: 90px;
	display: inline-flex;
}

.checkboxBtn input[type="radio"] {
	visibility: hidden;
	width: 0;
	height: 0;
	margin: 0;
}

.checkboxBtn:hover {
	background-color: #f9b05c;
	color: #4a4b4b;
}

.checkboxBtn:checked {
	background-color: #f9b05c;
	color: #4a4b4b;
}

.checkboxBtnChecked {
	background-color: #f9b05c;
	color: #4a4b4b;
}

.checkboxLbl {
	font-size: 0.8rem;
	text-align: center;
	margin: auto;
}

.instructionsBlock {
	margin-top: 1rem;
	overflow-y: scroll;
	max-height: 244px;
	transition: height 0.9s ease-in-out 0s;
}

.instructionsBlock p {
	text-align: left;
}

.moviePreviewPanel {
	background-color: #e9ecef;
	border-radius: 0.3em;
	padding: 0.25em 1em 1em 1em;
	height: 100%;
}

.infoIcon {
	cursor: pointer;
}



div.badge {
	display: inline-block;
	border-radius: .75em;
	font-family: 'Dejavu Sans', 'Arial';
	font-size: 10px;
	/* margin: 0; */
}

div.badge div {
	/* display: inline-block; */
	float: left;
	text-transform: lowercase;
	color: #FFF;
	text-shadow: 0px .1em 0px rgba(0, 0, 0, 0.5);
	margin: 0;
	padding: 0;
	border: 0;
}

div.badge div:first-child,
div.badge div:first-child span {
	border-top-left-radius: .25em;
	border-bottom-left-radius: .25em;
}

div.badge div:last-child,
div.badge div:last-child span {
	border-top-right-radius: .25em;
	border-bottom-right-radius: .25em;
}

div.badge div span {
	display: inline-block;
	background: linear-gradient(180deg, rgba(187, 187, 187, .1) 0%, rgba(0, 0, 0, .1) 100%);
	padding: .2em .2em;
	box-sizing: border-box;
}

.badge .name {
	background: #555555;
}

.badge .status.green {
	background: #44cc11;
}

.badge .status.yellow {
	background: #ddcc00;
}

.badge .status.blue {
	background: #00aadd;
}

.badge .status.red {
	background: #cc1100;
}

.badge .status.gray {
	background: #cccccc;
}

.badge .status.ersorange {
	background: #f9b05c;
}

.galleryFooter {
	margin-top: 0;
}

.shepherd-button-primary {
	background-color: #f9b05c !important;
	color: #4a4b4b !important;
}

.shepherd-button-secondary {
	background-color: #c0c0c0 !important;
}

.shepherd-header {
	background-color: #f9b05c !important;
}

.shepherd-element.shepherd-has-title[data-popper-placement^="bottom"]>.shepherd-arrow::before {
	background-color: #f9b05c !important;
}

.highlight {
	background-color: rgba(255, 190, 10, 0.5) !important;
	border-radius: 5px;
	box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.5);
	will-change: transform;
	padding: 9px
	/* display: block !important; */
}


.toolTipInlineBtn {
	background-color: #f9b05c;
	font-weight: 400;
	color: #4a4b4b;
}

.generalBodyContainer {
	background-color: #e9ecef;
	border-radius: 0.3em;
	padding: 0.25em 1em 1em 1em;
	height: 100%;
}

/**
 * ==============================================
 * Dot Typing
 * ==============================================
 */
.dot-typing {
	position: relative;
	left: -9999px;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
	box-shadow: 9984px 0 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	animation: dot-typing 1.5s infinite linear;
}

@keyframes dot-typing {
	0% {
		box-shadow: 9984px 0 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	}

	16.667% {
		box-shadow: 9984px -10px 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	}

	33.333% {
		box-shadow: 9984px 0 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	}

	50% {
		box-shadow: 9984px 0 0 0 #9880ff, 9999px -10px 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	}

	66.667% {
		box-shadow: 9984px 0 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	}

	83.333% {
		box-shadow: 9984px 0 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px -10px 0 0 #9880ff;
	}

	100% {
		box-shadow: 9984px 0 0 0 #9880ff, 9999px 0 0 0 #9880ff, 10014px 0 0 0 #9880ff;
	}
}

/**
 * ==============================================
 * Dot Floating
 * ==============================================
 */
.dot-floating {
	position: relative;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
	animation: dot-floating 3s infinite cubic-bezier(0.15, 0.6, 0.9, 0.1);
}

.dot-floating::before,
.dot-floating::after {
	content: "";
	display: inline-block;
	position: absolute;
	top: 0;
}

.dot-floating::before {
	left: -12px;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	/* background-color: #9880ff; */
	background-color: #f9b05c;
	/* color: #9880ff; */
	color: #f9b05c;
	animation: dot-floating-before 3s infinite ease-in-out;
}

.dot-floating::after {
	left: -24px;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
	animation: dot-floating-after 3s infinite cubic-bezier(0.4, 0, 1, 1);
}

@keyframes dot-floating {
	0% {
		left: calc(-50% - 5px);
	}

	75% {
		left: calc(50% + 105px);
	}

	100% {
		left: calc(50% + 105px);
	}
}

@keyframes dot-floating-before {
	0% {
		left: -50px;
	}

	50% {
		left: -12px;
	}

	75% {
		left: -50px;
	}

	100% {
		left: -50px;
	}
}

@keyframes dot-floating-after {
	0% {
		left: -100px;
	}

	50% {
		left: -24px;
	}

	75% {
		left: -100px;
	}

	100% {
		left: -100px;
	}
}

/**
 * ==============================================
 * Dot Pulse
 * ==============================================
 */
.dot-pulse {
	position: relative;
	left: -9999px;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
	box-shadow: 9999px 0 0 -5px;
	animation: dot-pulse 1.5s infinite linear;
	animation-delay: 0.25s;
}

.dot-pulse::before,
.dot-pulse::after {
	content: "";
	display: inline-block;
	position: absolute;
	top: 0;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
}

.dot-pulse::before {
	box-shadow: 9984px 0 0 -5px;
	animation: dot-pulse-before 1.5s infinite linear;
	animation-delay: 0s;
}

.dot-pulse::after {
	box-shadow: 10014px 0 0 -5px;
	animation: dot-pulse-after 1.5s infinite linear;
	animation-delay: 0.5s;
}

@keyframes dot-pulse-before {
	0% {
		box-shadow: 9984px 0 0 -5px;
	}

	30% {
		box-shadow: 9984px 0 0 2px;
	}

	60%,
	100% {
		box-shadow: 9984px 0 0 -5px;
	}
}

@keyframes dot-pulse {
	0% {
		box-shadow: 9999px 0 0 -5px;
	}

	30% {
		box-shadow: 9999px 0 0 2px;
	}

	60%,
	100% {
		box-shadow: 9999px 0 0 -5px;
	}
}

@keyframes dot-pulse-after {
	0% {
		box-shadow: 10014px 0 0 -5px;
	}

	30% {
		box-shadow: 10014px 0 0 2px;
	}

	60%,
	100% {
		box-shadow: 10014px 0 0 -5px;
	}
}

.loaderStage {
	display: flex;
	justify-content: center;
	align-items: center;
	position: relative;
	padding: 32px 0;
	margin: 0 5%;
	overflow: hidden;

}

p.informedConsent-title {
	margin-bottom: 9px;
	font-weight: 700;
	text-transform: uppercase;
}

p.informedConsent-text {
	margin-bottom: 0;
	font-weight: 300;
}

.informedConsent-bold {
	margin-bottom: 0;
	font-weight: 500;
}

.onboarding-step {
	font-size: 13px;
}

.shepherd-text p {
	font-size: 13px;
}

.shepherd-text li {
	font-size: 13px;
}

.movielist-btn {
	width: 81px;
    font-size: 13px;
    margin-right: 6px;
}

================
File: src/App.jsx
================
import 'bootstrap/dist/css/bootstrap.min.css';
import { Suspense } from 'react';
import { Route, BrowserRouter as Router, Routes } from 'react-router-dom';
import './App.css';
import AdvisorsPage from './pages/advisors/AdvisorsPage';
// import MainLandingPage from './pages/MainLandingPage';
import Welcome from './pages/welcome';
import MovieRatingPage from './pages/ratemovies/MovieRatingPage';
import Survey from './pages/survey';
import SystemIntro from './pages/SystemIntro';
import FeedbackPage from './pages/feedbackPage';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Preference Community</h1>
      </header>
      <Router basename='/preference-community'>
        <Suspense fallback={<div>Loading...</div>}>
          <Routes>
            <Route path="/" element={<Welcome next="/presurvey"/>} />
            <Route path="/presurvey" element={<Survey next="/systemintro"/>} /> 
            <Route path="/systemintro" element={<SystemIntro next="/ratemovies"/>} />
            <Route path="/ratemovies" element={<MovieRatingPage next="/advisors"/>} />
            <Route path="/advisors" element={<AdvisorsPage next="/feedback"/>} />
            <Route path="/feedback" element={<FeedbackPage next="/quit"/>} />
            <Route path="/quit" element={<h1>Thank you for participating!</h1>} />

          </Routes>
        </Suspense>
      </Router>
    </div>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/constants/defaults.jsx
================
export const default_movie_thumbnail = 
	"https://rssa.recsys.dev/movie/poster/default_movie_icon.svg"

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <App />
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/middleware/api-middleware.jsx
================
export const API = process.env.NODE_ENV !== "production" ? "https://rssa.recsys.dev/newrs/api/v1/"
	: "http://localhost:8000/";

// export const API = "http://localhost:3000/"

export const CORSHeaders = {
	'Content-Type': 'application/json',
	'Access-Control-Allow-Origin': '*',
	'Access-Control-Allow-Headers': '*',
	'Access-Control-Allow-Methods': 'OPTIONS,PUT,POST,GET',
};

function getHeaders(userdata) {
	let headers = CORSHeaders;
	if (userdata) {
		headers = {
			...CORSHeaders,
			'study-id': userdata.study_id
		}
	}
	return headers;
}

export function post(path: string, data: any, userdata) {
	return bodyRequest('POST', path, data, getHeaders(userdata));
}

export function put(path: string, data: any, userdata) {
	return bodyRequest('PUT', path, data, getHeaders(userdata));
}

function bodyRequest(method: string, path: string, data: any, headers) {
	return fetch(API + path, {
	  method: method,
	  headers: headers,
	  body: JSON.stringify(data)
	}).then(response => {
	  if (!response.ok) {
		throw new Error(`HTTP error! status: ${response.status}`);
	  }
	  return response;
	});
  }
  
  export function get(path: string, userdata) {
	return fetch(API + path, {
	  method: 'GET',
	  headers: getHeaders(userdata)
	}).then(response => {
	  if (!response.ok) {
		throw new Error(`HTTP error! status: ${response.status}`);
	  }
	  return response;
	});
  }
  

export function createUser(userType: string, studyId: int) {
	return post('user/consent/', {
		study_id: studyId,
		user_type: 'prefComStudy'
	}, { study_id: studyId })
}

// FIXME: This is a temporary function to create a test user
// Get rid of this function once the backend is fixed
export function createTestUser(userType, studyId, conditionId) {
	return post('user/consent/' + conditionId + '/', {
		study_id: studyId,
		user_type: 'prefComStudy'
	}, { study_id: studyId })
}

export function getStudy(studyid) {
	return get('study/' + studyid)
		.then((response): Promise<studyres> => response.json())
		.then((studyres: studyres) => {
			return studyres;
		});
}

export function getFirstStudyStep(studyid) {
	return get('study/' + studyid + '/step/first/')
		.then((response): Promise<StudyStepRes> => response.json())
		.then((studyStepRes: studyStepRes) => {
			return studyStepRes;
		})
}

export function getNextStudyStep(studyid, stepid) {
	return get('study/' + studyid + '/step/' + stepid + '/next')
		.then((response): Promise<step> => response.json())
		.then((step: step) => {
			return step;
		})
}

export function getNextStepPage(studyid, stepid, pageid) {
	return get('study/' + studyid + '/step/' + stepid + '/page/' + pageid + '/next')
		.then((response): Promise<page> => response.json())
		.then((page: page) => {
			return page;
		})
}

export function getPage(studyid, stepid, pageid) {
	return get('study/' + studyid + '/step/' + stepid + '/page/' + pageid)
		.then((response): Promise<page> => response.json())
		.then((page: page) => {
			return page;
		})
}

const requestBodyMeta = (userdata, pageid) => {
	return {
		user_id: userdata.id,
		study_id: userdata.study_id,
		page_id: pageid
	}
}

export function submitResponse(responseType: string, userdata, pageid,
	responses) {
	const data = {
		...requestBodyMeta(userdata, pageid),
		responses: responses
	}
	const url = 'user/' + userdata.id + '/response/' + responseType + '/';
	return put(url, data, userdata);
}

export function updateSeen(userdata, studyStep, pagelevel, items){
	const data = {
		...requestBodyMeta(userdata, studyStep.id),
		page_level: pagelevel,
		items: items
	}
	const url = 'user/' + userdata.id + '/seenitems/';
	return put(url, data, userdata);
}

export function updateRating(userdata, studyStep, pagelevel, ratings){
	const data = {
		...requestBodyMeta(userdata, studyStep.id),
		page_level: pagelevel,
		ratings: ratings
	}
	const url = 'user/' + userdata.id + '/itemrating/';
	return put(url, data, userdata);
}

export function submitSelection(userdata, pageData, selectedid){
	const data = {
		...requestBodyMeta(userdata, pageData.id),
		selected_item: {
			item_id: selectedid,
			rating: 99
		}
	}
	const url = 'user/' + userdata.id + '/itemselect/';
	return put(url, data, userdata);
}

export function submitDemographicInfo(userdata, agecode, genderstr, educationstr){
	const data = {
		user_id: userdata.id,
		study_id: userdata.study_id,
		age: agecode,
		gender: genderstr,
		education: educationstr
	}
	const url = 'user/' + userdata.id + '/demographicInfo/';
	return put(url, data, userdata);
}
// user_id: int
// study_id: int
// step_id: int
// page_id: Optional[int]
// time_spent: int
// interaction_type: str
// interaction_target: str
// item_id: Optional[int]
// rating: Optional[int]

export function sendLog(userdata, stepid, pageid: int, timespent: int, 
	inttype: string, target: string, itemid: int, rating: int) {
	const data = {
		...requestBodyMeta(userdata, pageid),
		step_id: stepid,
		time_spent: timespent,
		interaction_type: inttype, interaction_target: target,
		item_id: itemid, rating: rating
	}
	return put('user/' + userdata.id + '/log/', data, userdata)
		.then((response): Promise<log> => response.json())
		.then((log: log) => {
			return log;
		})
}

export const imgurl = (identifier) => {
	if (identifier === undefined || identifier === null) {
		return 'https://rssa.recsys.dev/movie/poster/default_movie_icon.svg';
	}
	return 'https://rssa.recsys.dev/movie/poster/' + identifier;
}

================
File: src/middleware/requests.js
================
export const API = process.env.NODE_ENV !== "production" ? "https://rssa.recsys.dev/newrs/api/v1/"
	: "http://localhost:8000/";

export const CORSHeaders = {
	'Content-Type': 'application/json',
	'Access-Control-Allow-Origin': '*',
	'Access-Control-Allow-Headers': '*',
	'Access-Control-Allow-Methods': 'OPTIONS,PUT,POST,GET'
};


function getHeaders(userdata) {
	let headers = CORSHeaders;
	if (userdata) {
		headers = {
			...CORSHeaders,
			'study-id': userdata.study_id
		}
	}
	return headers;
}


export function post(path: string, data: any, userdata) {
	return bodyRequest('POST', path, data, getHeaders(userdata));
}

export function get(path: string, userdata) {
	return fetch(API + path, {
		method: 'GET',
		headers: getHeaders(userdata)
	});
}


function bodyRequest(method: string, path: string, data: any, headers) {
	return fetch(API + path, {
		method: method,
		headers: headers,
		body: JSON.stringify(data)
	});
}


export const imgurl = (identifier) => {
	if (identifier === undefined || identifier === null) {
		return 'https://rssa.recsys.dev/movie/poster/default_movie_icon.svg';
	}
	return 'https://rssa.recsys.dev/movie/poster/' + identifier;
}

================
File: src/pages/advisors/AdvisorsPage.jsx
================
import React, { useEffect, useState } from "react";
import Container from "react-bootstrap/Container";
import { post, getNextStudyStep, sendLog } from '../../middleware/api-middleware';
import { LoadingScreen } from '../ratemovies/MovieRatingPage';
import AdvisorsWidget from "./components/AdvisorsWidget";
import { useLocation, useNavigate } from 'react-router-dom';
import '../ratemovies/components/MovieGrid.css';

export default function AdvisorsPage(props) {
	const userdata = useLocation().state.user;
	const stepid = useLocation().state.studyStep;

	const navigate = useNavigate();
	const [studyStep, setStudyStep] = useState(props.studyStep);

	const [starttime] = useState(new Date());

	const state = useLocation().state;
	const [loading, setLoading] = useState(true);
	const [recommendations, setRecommendations] = useState([]);

	useEffect(() => {
		getNextStudyStep(userdata.study_id, stepid)
			.then((value) => { 
				setStudyStep(value);
				fetchRecommendations();
			});
	}, [userdata.study_id, stepid]);

	const fetchRecommendations = () => {
		const ratedMoviesData = state ? state.ratings : [];
		const recType = state ? state.recType : 0;
		
		// Ensure each rating has an item_id
		const formattedRatings = ratedMoviesData.map(rating => ({
			item_id: rating.movie_id || rating.item_id, // Use movie_id if available, otherwise use item_id
			rating: rating.rating
		}));

		console.log("Payload:", {
			ratings: formattedRatings,
			rec_type: recType,
			num_rec: 7,
			user_id: userdata.id
		});
	
		if (formattedRatings.length > 0) {
			post('prefComm/advisors/', {
				ratings: formattedRatings,
				rec_type: recType,
				num_rec: 7,
				user_id: userdata.id
			})
			.then(response => response.json())
			.then(advisors => {
				setRecommendations(advisors);
				setLoading(false);
				sendLog(userdata, studyStep.id, null, new Date() - starttime, 
					'advisors_loaded', 'fetch', null, null);
			})
			.catch(error => {
				console.log("Error:", error);
				setLoading(false);
			});
		} else {
			console.log("No ratings available");
			setLoading(false);
		}
	};

	const handleAdvisorSelection = (advisorId) => {
		sendLog(userdata, studyStep.id, null, new Date() - starttime, 
			'advisor_selected', 'select', advisorId, null);
	};

	const handleAdvisorRating = (advisorId, rating) => {
		sendLog(userdata, studyStep.id, null, new Date() - starttime, 
			'advisor_rated', 'rate', advisorId, rating);
	};

	const handleNextStep = () => {
		sendLog(userdata, studyStep.id, null, new Date() - starttime, 
			'advisors_complete', 'next', null, null);
		navigate(props.next, { state: { user: userdata, studyStep: studyStep.id } });
	};

	return (
		<>
			{loading || recommendations.length === 0 ?
				<LoadingScreen 
					loading={loading || recommendations.length === 0}
					loadingMessage={'Please wait while the system prepares your recommendations'}
					loadingByline={"This may take a while."} 
				/>
				:
				<Container className="Main-content">	
					<AdvisorsWidget 
						currentAdvisors={recommendations}
						onAdvisorSelect={handleAdvisorSelection}
						onAdvisorRate={handleAdvisorRating}
						onComplete={handleNextStep}
					/>
				</Container>
			}
		</>
	)
}

================
File: src/pages/advisors/components/AdvisorDetails.jsx
================
import React, { useEffect, useState } from "react";
import { Container, Row, Col, Button, Image } from "react-bootstrap";
import parse from "html-react-parser";
import { imgurl, post } from "../../../middleware/requests";

const AdvisorDetails = ({ advisor, acceptCallback, rejectCallback, formData}) => {
  const [advisorProfile, setAdvisorProfile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [buttonDisabled, setButtonDisabled] = useState(false);
  const [showAdvisorProfile, setShowAdvisorProfile] = useState(false);
  const [advisorName, setAdvisorName] = useState("Advisor Name"); //Placeholder for advisor name
  const [recommendationSubmitted, setRecommendationSubmitted] = useState(false);
  const [showRating, setShowRating] = useState(false);
  const [rationale, setRationale] = useState("");

  useEffect(() => {
    if (advisor) {
       setButtonDisabled(advisor.status.toLowerCase() !== "pending");

       // Fetch initial profile data
       getAdvisorProfile(advisor.movie_id);
    }
 }, [advisor]);
  const getAdvisorProfile = (advisor_id) => {
    setLoading(true);
    post("prefComm/advisor/profile/", { advisor_id })
      .then((response) => response.json())
      .then((advisor) => {
        setAdvisorProfile(advisor);
        setShowAdvisorProfile(true);
      })
      .catch((error) => {
        console.log(error);
      })
      .finally(() => {
        setLoading(false);
      });
  };

  useEffect(() => {
    if (formData) {
      setShowRating(formData.rating !== undefined);
      setRationale(formData.rationale);
    }
 }, [formData]);


  const advisorProfileLabels = (key, value, isSubmitted) => {
    switch (key) {
      case "likes":
        return `<strong>The advisor likes</strong> ${value}`;
      case "dislikes":
        return `<strong>The advisor dislikes</strong> ${value}`;
      case "most_rated_genre":
        return `<strong>The advisor gave the highest rating to</strong> 
          ${value.toLowerCase()} movies`;
      case "genretopten":
        return `<strong>Top ten movies rated highly by the advisor 
          are</strong> ${value.toLowerCase()} movies`;
      case "genre_with_least_rating":
        return `<strong>The advisor's lowest rated movie was 
            a${['a', 'e', 'i', 'o', 'u'].includes(value[0].toLowerCase()) ?
            'n' : ''}</strong> ${value.toLowerCase()} movie`;
      default:
        return `The advisor's ${key} is ${value}`;
    }
  };

  if (!advisor) {
    return (
      <div style={{ border: "2px solid" }}>
        <h2>Advisor Details</h2>
      </div>
    );
  }

  return (
    <Container style={{ border: "2px solid" }}>
      {loading ? (
        <div>Loading advisor details...</div>
      ) : (
        <>
          {showAdvisorProfile && advisorProfile && (
            <Row>
              <Col>
                <div className="profile-heading">
                  {/* the image url is a placeholder for now */}
                  <img className="profImg" src={imgurl(advisor.poster_identifier)} alt="profile description" />
                  <p className="profHead">{advisorName}</p>
                </div>
              </Col>
            </Row>
          )}
          { showAdvisorProfile && advisorProfile && (
            <Row style={{border: "2px solid", margin: "2px"}}>
              <div className="movie-profile-heading">
                <h3>{advisorName} Profile Details</h3>
              </div>
              <Col>
                <ul>
                  {Object.entries(advisorProfile.profile).map(
                    ([key, value]) => (
                      <li
                        key={key}
                        className="AdvisorProfile-list-item"
                      >
                        <p>{parse(advisorProfileLabels(key, value))}</p>
                      </li>
                    )
                  )}
                </ul>
              </Col>
            </Row>
          )}
              <h2>{advisorName}'s Reccomendation to You</h2>
              <Row style={{ border: "2px solid", margin: "2px"}}>
                  <Col style={{ margin: "2px", width: "50%"}}>
                    <Image
                      className="AdvisorsDetails-poster"
                      src={imgurl(advisor.poster_identifier)}
                      alt={advisor.name}
                    />
                  </Col>
                  <Col style={{ margin: "2px", display: "flex", flexDirection: "column", justifyContent: "center" }}>
                    <p style={{ width: "100%", height: "100%", whiteSpace: "pre-wrap", fontSize: "1.5vw"}}>
                      Description of the advisor's recommendation to the user.
                      Will include extra details specified later on.
                    </p>
                  </Col>
              </Row>
          {showRating ? (
            <Row >
              <h3>Your Recommendation to {advisorName}</h3>
              <Col style={{ border: "2px solid", margin: "2px"}}>
                <p> {rationale}</p>
              </Col>
            </Row>
          ) : console.log(formData)}
        </>
      )}
    </Container>
  );
};

export default AdvisorDetails;

================
File: src/pages/advisors/components/AdvisorRecommendations.jsx
================
import React, { useEffect, useState } from "react";
import { Container, Row, Col, Button, Image } from "react-bootstrap";
import parse from "html-react-parser";
import { imgurl, post } from "../../../middleware/requests";
import "./Recommendations.css";

const AdvisorDetails = ({ advisor, acceptCallback, rejectCallback }) => {
    const [advisorProfile, setAdvisorProfile] = useState(null);
    const [loading, setLoading] = useState(false);
    const [showAdvisorProfile, setShowAdvisorProfile] = useState(false);
    const [advisorName, setAdvisorName] = useState("Advisor Name"); //TODO: change when we get the advisors name

  useEffect(() => {
    if (advisor) {
       // Fetch initial profile data
       getAdvisorProfile(advisor.movie_id);
    }
 }, [advisor]);

  const getAdvisorProfile = (advisor_id) => {
    setLoading(true);
    post("prefComm/advisor/profile/", { advisor_id })
      .then((response) => response.json())
      .then((advisor) => {
        setAdvisorProfile(advisor);
        setShowAdvisorProfile(true);
      })
      .catch((error) => {
        console.log(error);
      })
      .finally(() => {
        setLoading(false);
      });
  };

  const handleAccept = () => {
    acceptCallback(advisor.id);
    getAdvisorProfile(advisor.movie_id);
  };

  const handleReject = () => {
    rejectCallback(advisor.id);
    getAdvisorProfile(advisor.movie_id);
  };

  if (!advisor) {
    return (
      <div style={{ border: "2px solid" }}>
        <h2>Advisor Details</h2>
      </div>
    );
  }

  return (
    <Container style={{ display: 'flex', flexDirection: 'column', border: "2px solid" }}>
      {loading ? (
        <div>Loading advisor details...</div>
      ) : (
        <>
        <Row style={{ border: "1px solid", flex: 1 }}>
            <h4>How do you feel about {advisorName}'s recommendation?</h4>
        </Row>
        <Row
            className="AdvisorsDetails-button-panel"
        >
            <Col className="button-container1">
                <Button
                className="AdvisorsDetails-button-accept"
                variant="success"
                onClick={handleAccept}
                >
                Accept Recommendation
                </Button>
            </Col>
            <Col className="button-container2">
                <Button
                className="AdvisorsDetails-button-reject"
                variant="danger"
                onClick={handleReject}
                >
                Reject Recommendation
                </Button>
            </Col>
          </Row>
        </>
      )}
    </Container>
  );
};

export default AdvisorDetails;

================
File: src/pages/advisors/components/AdvisorsPanel.jsx
================
import { useEffect, useState } from "react";
import { Badge, Button, Image } from "react-bootstrap";
import Row from "react-bootstrap/Row";
import { default_movie_thumbnail } from "../../../constants/defaults";
import { imgurl } from "../../../middleware/requests";

export default function AdvisorsPanel({ activeSelection, advisors, selectCallback }) {

	return (
		<div style={{ border: "2px solid" }}>
			<Row>
				<h2>Your Advisors</h2>
			</Row>
			<Row>
				<ul>
					{advisors && advisors.map((advisor) =>
						<AdvisorListItem advisor={advisor}
							key={advisor.id}
							selected={advisor.id === activeSelection}
							selectCallback={selectCallback} />)}
				</ul>
			</Row>
		</div>
	)
}

const AdvisorListItem = ({ advisor, selected, selectCallback }) => {
	
	const listClass = "AdvisorPanel-list-item";
	
	return (
		<li className={listClass} onClick={() => selectCallback(advisor.id)}>
			<Image className="AdvisorPanel-list-item-image"
				src={imgurl(advisor.poster_identifier)} thumbnail />
			<div className="AdvisorPanel-list-item-desc">
				<h4>
					{advisor.name}
				</h4>
				<p>
					{advisor.advice_preview}
				</p>
			</div>
		</li>
	)
}

================
File: src/pages/advisors/components/AdvisorsWidget.css
================
.AdvisorPanel-list-item {
	text-align: left;
	display: flex;
	border: 1px solid;
	margin: 2px;
	cursor: pointer;
}

.AdvisorPanel-list-item:hover {
	background-color: #282c34;
	color: white;
}

.selected {
	background-color: #282c34;
	color: white;
}

.AdvisorPanel-list-item-image {
	height: 50px;
	width: 32px;
	margin-left: 5px;
	margin-right: 1px;
}

.AdvisorPanel-list-item-desc {
	display: flex;
	flex-direction: column;
	justify-content: center;
}

.AdvisorsDetails-poster {
	height: 150px;
	width: 150px;
	margin-left: 7px;
}

.AdvisorDetails-desc {
	display: flex;
	flex-direction: column;
	justify-content: center;
}

.AdvisorProfile-list-item {
	text-align: left;
	display: grid;
	grid-template-columns: auto 1fr;
	grid-gap: 10px;
	border: 1px solid;
	margin: 3px;
  }

.profImg{
	float: left;
	width: 60px;
	height: 60px;
	background: #555;
	margin-top: 2px;
	margin-bottom: 2px;
}

.profHead {
	float: left;
	margin-left: 10px;
}

.profile-heading {
	display: flex;
	align-items: center;
	justify-content: center;
	font-size: calc(10px + 2vh); /* Adjust the base font size and scaling factor as needed */
}

================
File: src/pages/advisors/components/AdvisorsWidget.jsx
================
import { useState } from "react";
import AdvisorDetails from "./AdvisorDetails";
import AdvisorsPanel from "./AdvisorsPanel";
import RecommendationForm from "./RecommendationForm";
import AdvisorRecommendations from "./AdvisorRecommendations";
import "./AdvisorsWidget.css";
import {Button, Col, Row} from "react-bootstrap";

function mapReplace(arr, prop, propval, callback) {
  return arr.map((item) => {
    if (item[prop] === propval) {
      return callback(item);
    } else {
      return item;
    }
  });
}

export default function AdvisorsWidget({ currentAdvisors }) {
  const [advisors, setAdvisors] = useState(currentAdvisors || []);
  const [activeSelection, setActiveSelection] = useState(null);
  const [approvalPressed, setApprovalPressed] = useState(false);
  const [formData, setFormData] = useState({});
  //TODO: set the advisor name here eventually

  const handleSelect = (advisorid) => {
    const selectedAdvisor = advisors.find((advisor) => advisor.id === advisorid);
    setActiveSelection(selectedAdvisor);
    setApprovalPressed(false); // Reset the state when selecting a new advisor
    setFormData({}); // Reset the form data when selecting a new advisor
  };

  const handleRating = (rating, advisorid) => {
    const selectedAdvisor = advisors.find((advisor) => advisor.id === advisorid);
    selectedAdvisor.rating = rating;
    const newAdvisors = mapReplace(advisors, "id", advisorid, (advisor) => {
      return selectedAdvisor;
    });
    setAdvisors(newAdvisors);
  };

  const handleAccept = (advisorid) => {
    const selectedAdvisor = advisors.find((advisor) => advisor.id === advisorid);
    selectedAdvisor.status = "Accepted";
    setApprovalPressed(true);
    const newAdvisors = mapReplace(advisors, "id", advisorid, (advisor) => {
      return selectedAdvisor;
    });
    setAdvisors(newAdvisors);
  };

  const handleReject = (advisorid) => {
    const selectedAdvisor = advisors.find((advisor) => advisor.id === advisorid);
    selectedAdvisor.status = "Rejected";
    setApprovalPressed(true);
    const newAdvisors = mapReplace(advisors, "id", advisorid, (advisor) => {
      return selectedAdvisor;
    });
    setAdvisors(newAdvisors);
  };

  return (
    <Row style={{ display: 'flex', flexDirection: 'row', alignItems: 'stretch' }}>
      <Col style={{ display: 'flex', flex: 1}}>
        <AdvisorsPanel
          advisors={advisors}
          activeSelection={activeSelection && activeSelection.id}
          selectCallback={handleSelect}
        />
      </Col>
      {activeSelection && (
        <Col style={{ display: 'flex', flex: 3.5}}>
          <AdvisorDetails
            advisor={activeSelection}
            ratingCallback={handleRating}
            acceptCallback={handleAccept}
            rejectCallback={handleReject}
            formData={formData}
          />
        </Col>
      )}
      {activeSelection && (
      <Col style={{ display: 'flex', flex: 1}}>
        {!approvalPressed && (
          <AdvisorRecommendations
            advisor={activeSelection}
            acceptCallback={handleAccept}
            rejectCallback={handleReject}
          />
        )}
        {approvalPressed && (
          <RecommendationForm
            advisor={activeSelection}  // Pass the correct advisor prop
            onSubmit={(newFormData) => {
              setFormData(newFormData);
              // Handle form submission logic here
              console.log("Form data:", formData);
            }}
          />
        )}
      </Col>
      )}
    </Row>
  );
}

================
File: src/pages/advisors/components/RecommendationForm.jsx
================
import React, { useState } from "react";
import { Form, Button, Alert} from "react-bootstrap";
import "./Recommendations.css";

const RecommendationForm = ({ advisor, onSubmit }) => {
  const [movieName, setMovieName] = useState("");
  const [rating, setRating] = useState(3);
  const [rationale, setRationale] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [advisorName, setAdvisorName] = useState("Advisor Name"); //TODO: change when we get the advisors name

  const handleSubmit = () => {
    // Add any additional validation or processing logic here
    // Then call onSubmit with the form data
    onSubmit({
      movieName,
      rating,
      rationale,
    });
    setIsSubmitted(true);
  };

  const handleReset = () => {
    // Reset form state and submission status
    setMovieName("");
    setRating(3);
    setRationale("");
    setIsSubmitted(false);
  };

  

  return (
    <div className="form-container">
      <h3>Recommendation Form</h3>
      {isSubmitted  ? (
        <>
          <Alert variant="success" style={{ padding: "10px", marginTop: "25%", margin: "20px", height: "30%", fontSize: "1.2em"}}>
           Your recommendation has been saved; thank you!
          </Alert>
        </>
      ) : (
        <div>  
          <Form>
            <Form.Group className="recommendation-form-name" controlId="recommendation">
              <Form.Label>Please input the movie you wish to recommend to {advisorName}.</Form.Label>
              <Form.Control
                type="text"
                placeholder="Movie name ..."
                value={movieName}
                onChange={(e) => setMovieName(e.target.value)}
              />
            </Form.Group>
            <Form.Group className="recommendation-form-why" controlId="rationale">
              <Form.Label>
                Why do you recommend this movie to {advisorName}?
              </Form.Label>
              <Form.Control
                as="textarea"
                rows={5}
                value={rationale}
                onChange={(e) => setRationale(e.target.value)}
              />
            </Form.Group>
            <Button className="submit-btn" variant="primary" onClick={handleSubmit}
            disabled={rationale === "" || movieName === ""}>
              Submit
            </Button>
          </Form>
        </div>
      )}
    </div>
  );
};

export default RecommendationForm;

================
File: src/pages/advisors/components/Recommendations.css
================
.form-container {
    border: 2px solid;
}

.recommendation-form-name {
    margin-top: 7%;
}

.recommendation-form-why {
	margin-top: 20%;
}

.submit-btn {
    margin-top: 5%;
    margin-bottom: 3%;
    width:50%;
    height:50%;
}

.AdvisorsDetails-button-panel{
    justify-content: space-evenly;
    flex: 2;
    display: flex;
    flex-direction: row;
    align-items: stretch;
    padding: 10px;
    border: 1px solid;
}

.button-container1{
    flex: 1;
    margin: 2px;
    padding-top: 50px;
}

.button-container2{
    flex: 1;
    margin: 2px;
}
.AdvisorsDetails-button-accept{
    font-size: 1.2em;
    height: 70%;
}

.AdvisorsDetails-button-reject{
    font-size: 1.2em;
    height: 70%;
}

================
File: src/pages/feedbackPage.jsx
================
import { useEffect, useState } from 'react';
import Card from 'react-bootstrap/Card';
import Container from 'react-bootstrap/Container';
import Form from 'react-bootstrap/Form';
import Row from 'react-bootstrap/Row';
import { useLocation, useNavigate } from 'react-router-dom';
import { get, getNextStudyStep, sendLog, submitResponse } from '../middleware/api-middleware';
import NextButton from '../widgets/nextButton';


export default function FeedbackPage(props) {

	const userdata = useLocation().state.user;
	const stepid = useLocation().state.studyStep;
	const navigate = useNavigate();

	const [buttonDisabled, setButtonDisabled] = useState(true);
	const [loading, setLoading] = useState(false);
	const [responseText, setResponseText] = useState('');
	const [studyStep, setStudyStep] = useState({});
	const [pageData, setPageData] = useState({});

	const [starttime, setStarttime] = useState(new Date());

	useEffect(() => {
		getNextStudyStep(userdata.study_id, stepid)
			.then((value) => { setStudyStep(value) });
	}, []);

	const storeText = (evt) => {
		setResponseText(evt.target.value);
		if (evt.target.textLength > 1) {
			setButtonDisabled(false);
		} else {
			setButtonDisabled(true);
		}

	}

	const getStepPage = (studyid, stepid, pageid) => {
		let path = '';
		if (pageid !== null) {
			path = 'study/' + studyid + '/step/' + stepid + '/page/' + pageid + '/next';
		} else {
			path = 'study/' + studyid + '/step/' + stepid + '/page/first/';
		}
		get(path)
			.then((response): Promise<page> => response.json())
			.then((page: page) => {
				setPageData(page);
			})
			.catch((error) => console.log(error));
	}

	useEffect(() => {
		if (Object.keys(studyStep).length > 0) {
			getStepPage(userdata.study_id, studyStep.id, null);
		}
	}, [studyStep, userdata.study_id]);

	const submitHandler = () => {
		sendLog(userdata, studyStep.id, null, new Date() - starttime, 'navigate', 'next', null, null);

		submitResponse('freetext', userdata, pageData.id,
			[{ question_id: pageData.questions[0].id, response: responseText }]
		)
			.then((response): Promise<isvalidated> => response.json())
			.then((isvalidated: isvalidated) => {
				if (isvalidated === true) {
					navigate(props.next, {
						state: {
							user: userdata,
							studyStep: studyStep.id
						}
					});
				} else {
					setLoading(false);
				}
			})
			.catch((error) => console.log(error));
	}

	return (
		<Container>
			<Row>
				<div className="jumbotron">
					<h1 className="header">Thank you for interacting with the movie recommender system</h1>
					<p>We will now ask you several questions about your experience interacting with the system.
					</p>
				</div>
			</Row>
			<Row>
				<Card bg="light">
					<Card.Body>
						<Card.Title>Did anything go wrong while using the system?</Card.Title>
						<Form.Group className="mb-3" controlId="responseText">
							<Form.Label>If nothing went wrong, please write “No” in the box below.</Form.Label>
							<Form.Control as="textarea" rows={3} onChange={(evt) =>
								storeText(evt)} />
						</Form.Group>
					</Card.Body>
				</Card>
			</Row>
			<Row>
				<div className="jumbotron jumbotron-footer">
					<NextButton disabled={buttonDisabled && !loading}
						loading={loading} onClick={() => submitHandler()} />
				</div>
			</Row>
		</Container>
	);
}

================
File: src/pages/MainLandingPage.jsx
================
import { useNavigate } from "react-router-dom"
import Button from 'react-bootstrap/Button';

export default function MainLandingPage() {
	const navigate = useNavigate();


	return (
		<div>
			<h1>Welcome</h1>
			<Button onClick={() => navigate("/ratemovies")}>Begin</Button>
		</div>
	)
}

================
File: src/pages/ratemovies/components/MovieGrid.css
================
.gallery {
	width: -moz-fit-content;
	width: fit-content;
	margin: 0 auto;
}

.gallery .btnDiv {
	margin-top: 0.75em;
	padding: 0;
}

.gallery .btnDiv Button {
	width: 360px;
	height: 54px;
	margin: 0;
}

.grid-container {
	display: grid;
	grid-template-columns: auto auto auto auto auto auto auto auto;
	grid-template-rows: auto auto auto;
	justify-items: stretch;
	overflow-x: hidden;
	grid-column-gap: 0.25em;
	grid-row-gap: 0.25em;
	border-radius: 0.5em;
}

.grid-item {
	position: relative;
	background-size: contain;
	background-position-x: center;
	background-position-y: top;
	background-repeat: no-repeat;
	background-color: rgba(0, 0, 0, 1.0);
	width: 117px;
	text-align: center;
	height: 153px;
}

.grid-item-label {
	background-color: black;
	color: white;
	opacity: 0.8;
	font-size: 13px;
	bottom: 0;
	text-align: center;
	vertical-align: middle;
	width: 100%;
	min-height: 50px;
	display: flex;
	z-index: 10;
	justify-content: center;
	align-content: center;
	align-items: center;
}

.grid-item:hover .overlay {
	width: 100%;
	height: 100%;
	background-color: black;
	opacity: 0.8;
}

.grid-item .rated.overlay {
	width: 100%;
	height: 100%;
	background-color: black;
	opacity: 0.8;
}

.grid-item:hover .star-div {
	z-index: 9;
	display: flex;
}

.star-div {
	height: 27px;
	justify-content: center;
	align-content: center;
	margin: 0 auto;
	padding-top: 25%;
	display: none;
}

.star-div-rated {
	height: 27px;
	justify-content: center;
	align-content: center;
	margin: 0 auto;
	padding-top: 25%;
	display: visible;
}

.rankHolder {
	width: -moz-fit-content;
	width: fit-content;
	margin: 1.6em auto 0 auto;
}

.rankHolder span {
	font-family: "Calibri", Georgia, Serif, serif;
	font-size: 1.6em;
	text-align: center;
	/* padding-top: 17px; */
}

.rankHolder span:nth-child(2) {
	color: #357df2;
	font-weight: bold;
	padding-left: 5px;
	padding-right: 5px;

}

.rankHolder span:last-child {
	font-family: "Calibri", Georgia, Serif, serif;
	font-size: 1.6em;
	text-align: center;

	color: #62656b;
}

/**
 * ==============================================
 * Dot Floating
 * ==============================================
 */
 .dot-floating {
	position: relative;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
	animation: dot-floating 3s infinite cubic-bezier(0.15, 0.6, 0.9, 0.1);
}

.dot-floating::before,
.dot-floating::after {
	content: "";
	display: inline-block;
	position: absolute;
	top: 0;
}

.dot-floating::before {
	left: -12px;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	/* background-color: #9880ff; */
	background-color: #f9b05c;
	/* color: #9880ff; */
	color: #f9b05c;
	animation: dot-floating-before 3s infinite ease-in-out;
}

.dot-floating::after {
	left: -24px;
	width: 10px;
	height: 10px;
	border-radius: 5px;
	background-color: #9880ff;
	color: #9880ff;
	animation: dot-floating-after 3s infinite cubic-bezier(0.4, 0, 1, 1);
}

@keyframes dot-floating {
	0% {
		left: calc(-50% - 5px);
	}

	75% {
		left: calc(50% + 105px);
	}

	100% {
		left: calc(50% + 105px);
	}
}

@keyframes dot-floating-before {
	0% {
		left: -50px;
	}

	50% {
		left: -12px;
	}

	75% {
		left: -50px;
	}

	100% {
		left: -50px;
	}
}

@keyframes dot-floating-after {
	0% {
		left: -100px;
	}

	50% {
		left: -24px;
	}

	75% {
		left: -100px;
	}

	100% {
		left: -100px;
	}
}

.loaderStage {
	display: flex;
	justify-content: center;
	align-items: center;
	position: relative;
	padding: 32px 0;
	margin: 0 5%;
	overflow: hidden;

}

================
File: src/pages/ratemovies/components/MovieGrid.jsx
================
import React, { useState } from 'react';
import Button from 'react-bootstrap/Button';
import Col from 'react-bootstrap/Col';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Spinner from 'react-bootstrap/Spinner';
import MovieGridItem from './MovieGridItem';
import './MovieGrid.css';


export const MovieGrid = ({ movies, pagingCallback, itemsPerPage, dataCallback,
	ratingCallback, maxlength }) => {
	const [currentPage, setCurrentPage] = useState(1);

	const renderPrev = () => {
		if (currentPage > 1) {
			if (pagingCallback) {
				pagingCallback(currentPage - 1);
			}
			setCurrentPage(currentPage - 1);
		}
	}

	const renderNext = () => {
		if (currentPage * itemsPerPage < movies.length) {
			dataCallback();
		}
		if (pagingCallback) {
			pagingCallback(currentPage + 1);
		}
		setCurrentPage(currentPage + 1);
	}

	return (
		<Container className="gallery">
			<Row>
				<div className="grid-container">
					{(currentPage * itemsPerPage <= movies.length) ?
						<>
							{movies.slice((currentPage - 1) * itemsPerPage,
								currentPage * itemsPerPage)
								.map(currentMovie => (
									<MovieGridItem key={"TN_" + currentMovie.id}
										movieItem={currentMovie}
										handleRating={ratingCallback} />
								))}
						</>
						: <div style={{
							minWidth: "918px",
							minHeight: "fit-parent"
						}}>
							<Spinner animation="border" role="status"
								style={{
									margin: "18% 50%",
									width: "54px", height: "54px"
								}} />
						</div>
					}
				</div>
			</Row>
			<Row className="galleryFooter">
				<Col>
					<div className="btnDiv">
						<Button id="gallery-left-btn"
							disabled={currentPage === 1}
							variant="ers" onClick={renderPrev}>
							&lt;
						</Button>
					</div>
				</Col>
				<Col>
					<div className="btnDiv">
						<Button id="gallery-right-btn"
							disabled={currentPage * itemsPerPage === maxlength}
							variant="ers" onClick={renderNext}>
							&gt;
						</Button>
					</div>
				</Col>
			</Row>
		</Container>
	);
}

export default MovieGrid;

================
File: src/pages/ratemovies/components/MovieGridItem.jsx
================
import React, { useEffect } from 'react';
import StarRatings from 'react-star-ratings';
import { imgurl } from '../../../middleware/requests';


export default function MovieGridItem(props) {

	const [movieItem, setMovieItem] = React.useState(props.movieItem);
	useEffect(() => { setMovieItem(props.movieItem) }, [props.movieItem]);

	const poster_identifier = movieItem.poster_identifier;

	const rated = movieItem.rating !== undefined;

	return (
		<div id={"TN_" + movieItem.movie_id}
			className={"grid-item"} style={{
				backgroundImage: "url(" + imgurl(poster_identifier) + "), url(" + imgurl(null) + ")",
			backgroundColor: "rgb(249, 176, 92, 0.6)"
			}}>
			<div className={rated ? "rated overlay" : "overlay"}>
				<div className={movieItem.rating > 0 ? 'star-div-rated' : 'star-div'}>
					<StarRatings
						rating={movieItem.rating}
						starRatedColor="rgb(252,229,65)"
						starHoverColor="rgb(252,229,65)"
						starDimension="18px"
						starSpacing="1px"
						changeRating={props.handleRating}
						numberOfStars={5}
						name={movieItem.movie_id.toString()} />
				</div>
			</div>
			<div className="grid-item-label" style={{ position: "absolute" }}>
				{movieItem.title + " (" + movieItem.year + ")"}
			</div>
		</div>
	);
}

================
File: src/pages/ratemovies/MovieRatingPage.jsx
================
import React, { useEffect, useState } from 'react';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import { get, post, getNextStudyStep } from '../../middleware/api-middleware';
import MovieGrid from './components/MovieGrid';

import Button from 'react-bootstrap/Button';
import Spinner from 'react-bootstrap/Spinner';

import { useLocation, useNavigate } from 'react-router-dom';

export default function MovieRatingPage(props) {
	const itemsPerPage = 24;

	const userdata = useLocation().state.user;
	const stepid = useLocation().state.studyStep;

	const navigate = useNavigate();
	const [studyStep, setStudyStep] = useState(props.studyStep);
	const [movieIds, setMovieIds] = useState([]);

	const [ratedMoviesData, setRatedMoviesData] = useState([]);
	const [ratedMovies, setRatedMovies] = useState([]);
	const [movies, setMovies] = useState([]);

	const [ratedMovieCount, setRatedMovieCount] = useState(0);
	const [buttonDisabled, setButtonDisabled] = useState(true);

	const [loading, setLoading] = useState(false);
	const [currentPage, setCurrentPage] = useState(1);

	const [moviesToFetch, setMoviesToFetch] = useState([]);

	useEffect(() => { 
		getNextStudyStep(userdata.study_id, stepid) 
		.then((value) => {
			setStudyStep(value);
		});
	}, [userdata.study_id, stepid]);


	function handleNavigate(recType, recommendedMovies, ratedMoviesData) {
		console.log('rectype', recType);
		navigate(props.next,
			{
				state: {
					recommendations: recommendedMovies,
					ratings: ratedMoviesData,
					recType: recType,
					user: userdata,
					studyStep: studyStep.id
				}
			});
	}


	const rateMoviesHandler = (newRating, idstr) => {
		const movieid = parseInt(idstr);
		const isNew = !ratedMoviesData.some(item =>
			item.item_id === movieid);

		let newrefMovies = [...movies];
		let newrefRatedMovies = [...ratedMovies];
		let newrefRatedMoviesData = [...ratedMoviesData];

		let updatedmovie = newrefMovies.find(item => item.movie_id === movieid);
		updatedmovie.rating = newRating;
		if (isNew) {
			let updatevisited = [...ratedMoviesData, { item_id: movieid, rating: newRating }];
			let updaterated = [...ratedMovies, updatedmovie];
			setRatedMovies(updaterated);
			setRatedMoviesData(updatevisited);
			setRatedMovieCount(updatevisited.length);
			setButtonDisabled(updatevisited.length < 10);
		} else {
			let updatevisited = newrefRatedMoviesData.find(item => item.item_id === movieid);
			updatevisited.rating = newRating;

			let updaterated = newrefRatedMovies.find(item => item.movie_id === movieid);
			updaterated.rating = newRating;
			setRatedMovies(newrefRatedMovies);
			setRatedMoviesData(newrefRatedMoviesData);
		}
		setMovies(newrefMovies);
	}
	const pickRandomMovies = () => {
		const limit = itemsPerPage * 2;
		let randomMovies = [];
		let moviearr = [...movieIds];
		for (let i = 0; i < limit; i++) {
			let randomMovie = moviearr.splice(Math.floor(Math.random()
				* moviearr.length), 1);
			randomMovies.push(...randomMovie);
		}
		setMovieIds(moviearr);
		setMoviesToFetch(randomMovies);
	}

	useEffect(() => {
		const limit = itemsPerPage * 2;
		let moviearr = [...movieIds];
		let randomMovies = [];
		for (let i = 0; i < limit; i++) {
			let randomMovie = moviearr.splice(Math.floor(Math.random()
				* moviearr.length), 1);
			randomMovies.push(...randomMovie);
		}
		setMoviesToFetch(randomMovies);
	}, [movieIds]);

	
useEffect(() => {
    const getMoviesByIDs = async (ids) => {
        console.log('Fetching movies with IDs:', ids); // Log the IDs being fetched
        try {
            const response = await post('ers/movies/', ids);
            console.log('Response received:', response); // Log the response object
            const newmovies = await response.json();
            console.log('Movies fetched:', newmovies); // Log the movies data
            setMovies((prevMovies) => [...prevMovies, ...newmovies]);
        } catch (error) {
            console.error('Error fetching movies:', error); // Log any errors
        }
    };

    if (moviesToFetch.length > 0) {
        getMoviesByIDs(moviesToFetch);
    } else {
        console.log('No movies to fetch.'); // Log if there are no movies to fetch
    }

}, [moviesToFetch]);

	useEffect(() => {
		const getAllMovieIds = async () => {
			get('ers/movies/ids/')
				.then((response): Promise<movie[]> => response.json())
				.then((newmovies: movie[]) => {
					console.log(newmovies);
					setMovieIds(newmovies);

				})
				.catch((error) => console.log(error));
		}
		getAllMovieIds();
	}, []);

	const submitHandler = (recType) => {
		setLoading(true);

		if (ratedMovies.length > 0) {
			handleNavigate(recType, ratedMoviesData, ratedMovies);
		}
	}

	const updateCurrentPage = (page) => {
		const currentpage = currentPage;
		let action = 'next';
		if (currentpage > page) {
			action = 'prev';
		}
		setCurrentPage(page);
	}

	const loadingMsg = 'Please wait while the system ' +
		'prepares your recommendations'

	return (
		<>
			{loading ?
				<LoadingScreen loading={loading} loadingMessage={loadingMsg} />
				:
				<Container>
					<Row>
						<MovieGrid ratingCallback={rateMoviesHandler}
							movies={movies}
							pagingCallback={updateCurrentPage}
							itemsPerPage={itemsPerPage}
							dataCallback={pickRandomMovies} />
					</Row>
					<Row>
						<div className="jumbotron jumbotron-footer"
							style={{ display: "flex" }}>
							<RankHolder count={ratedMovieCount} />
							<NextButton disabled={buttonDisabled && !loading}
								loading={loading}
								onClick={() => submitHandler(0)} />
						</div>
					</Row>
				</Container>
			}
		</>
	);
}

const RankHolder = (props) => {
	return (
		<div className="rankHolder">
			<span> Ranked Movies: </span>
			<span><i>{props.count}</i></span>
			<span><i>of {10}</i></span>
		</div>
	)
}


export const LoadingScreen = ({ loading, loadingMessage, loadingByline }) => {

	return (
		<>
			{loading &&
				<div style={{
					position: "absolute", width: "100%",
					height: "100%", zIndex: "999",
					backgroundColor: "rgba(255, 255, 255, 1)",
					margin: "18px auto auto auto"
				}}>
					<h2 style={{
						margin: "300px auto 3px auto",
						color: "black"
					}}>
						{loadingMessage}
						<div className="loaderStage">
							<div className="dot-floating" style={{
								margin: "1.5em auto"
							}}></div>
						</div>
					</h2>
					{loadingByline &&
						<p>{loadingByline}</p>
					}
				</div>
			}
		</>
	)
}

export const NextButton = ({ variant, disabled, loading, onClick }) => {

	variant = variant || "ers";

	return (
		<Button variant={variant} size="lg" className="nextButton footer-btn"
			disabled={disabled} onClick={onClick}>
			{!loading ? 'Next'
				:
				<>
					<Spinner
						as="span"
						animation="grow"
						size="sm"
						role="status"
						aria-hidden="true"
					/>
					Loading...
				</>
			}
		</Button>
	)
}

================
File: src/pages/survey.jsx
================
import { useEffect, useState } from "react";
import Container from "react-bootstrap/Container";
import Row from "react-bootstrap/Row";
import { useLocation, useNavigate } from "react-router-dom";
import { get, getNextStudyStep, sendLog, submitResponse } from "../middleware/api-middleware";
import HeaderJumbotron from "../widgets/headerJumbotron";
import NextButton from "../widgets/nextButton";
import SurveyTemplate from "../widgets/survey/surveyTemplate";

export default function Survey(props) {
	const userdata = useLocation().state.user;
	const stepid = useLocation().state.studyStep;
	const navigate = useNavigate();

	const [pageData, setPageData] = useState({});
	const [nextButtonDisabled, setNextButtonDisabled] = useState(true);
	const [loading, setLoading] = useState(false);
	const [surveyAnswers, setSurveyAnswers] = useState({});
	const [serverValidation, setServerValidation] = useState({});
	const [studyStep, setStudyStep] = useState({});
	const [showUnanswered, setShowUnanswered] = useState(false);

	const [starttime, setStarttime] = useState(new Date());
	const [pageStarttime, setPageStarttime] = useState(new Date());

	const getsurveypage = (studyid, stepid, pageid) => {
		let path = '';
		if (pageid !== null) {
			path = 'study/' + studyid + '/step/' + stepid + '/page/' + pageid + '/next';
		} else {
			path = 'study/' + studyid + '/step/' + stepid + '/page/first/';
		}
		get(path)
			.then((response): Promise<page> => response.json())
			.then((page: page) => {
				setPageData(page);
				setPageStarttime(new Date());
				setShowUnanswered(false);
				const pagevalidation = {};
				pagevalidation[page.id] = false;
				setServerValidation({ ...serverValidation, ...pagevalidation });
				setNextButtonDisabled(true);
			})
			.catch((error) => console.log(error));
	}

	useEffect(() => {
		getNextStudyStep(userdata.study_id, stepid)
			.then((value) => { setStudyStep(value) });
		setStarttime(new Date());
	}, []);

	useEffect(() => {
		if (Object.keys(surveyAnswers).length === 0 && Object.entries(studyStep).length !== 0) {
			getsurveypage(userdata.study_id, studyStep.id, null);
		}
	}, [studyStep]);

	useEffect(() => {
		if (pageData.id === null) {
			sendLog(userdata, studyStep.id, pageData.id, new Date() - starttime,
				'survey complete', 'submit', null, null);
			navigate(props.next, {
				state: { user: userdata, studyStep: studyStep.id }
			});
		} else { window.scrollTo(0, 0); }
		setLoading(false);
	}, [pageData, navigate, userdata, studyStep, props.next, starttime]);

	const next = () => {
		let timediff = 0;
		let behavior = 'buttonClick';
		let buttonAct = 'something went wrong: React App survey.jsx next()';
		if (nextButtonDisabled) {
			setShowUnanswered(true);
			timediff = new Date() - pageStarttime;
			behavior = 'prematureNext';
			buttonAct = 'next';
		} else {
			setLoading(true);
			if (pageData.id !== null) {
				if (serverValidation[pageData.id] === false) {
					submitAndValidate();
					timediff = new Date() - pageStarttime;
					behavior = 'surveyResponse';
					buttonAct = 'next';
				} else {
					getsurveypage(userdata.study_id, studyStep.id, pageData.id);
				}
			}
		}
		sendLog(userdata, studyStep.id, pageData.id, timediff, behavior, buttonAct,
			null, null);
	}

	const submitHandler = (data) => {
		setSurveyAnswers(data);
		setNextButtonDisabled(false);
	}

	const submitAndValidate = () => {
		const surveyResponse = Object.entries(surveyAnswers)
			.map(([key, value]) => {
				return { 'question_id': key, 'response': value }
			})
		submitResponse('likert', userdata, pageData.id, surveyResponse)
			.then((response): Promise<isvalidated> => response.json())
			.then((isvalidated: isvalidated) => {
				if (isvalidated === true) {
					setServerValidation({ ...serverValidation, [pageData.id]: true });
					getsurveypage(userdata.study_id, studyStep.id, pageData.id);
					setNextButtonDisabled(true);
				} else { setLoading(false); }
			})
			.catch((error) => console.log(error));
	}

	const logHandler = (qid, val) => {
		sendLog(userdata, studyStep.id, pageData.id, new Date() - pageStarttime,
			'surveyResponse', pageData.page_name, qid, val);
	}

	return (
		<Container>
			<Row>
				<HeaderJumbotron title={studyStep.step_name} content={studyStep.step_description} />
			</Row>
			<Row>
				{Object.entries(pageData).length !== 0 ?
					<SurveyTemplate surveyquestions={pageData.questions}
						surveyquestiongroup={pageData.page_name}
						showUnanswered={showUnanswered}
						submitCallback={submitHandler}
						logginCallback={logHandler} />
					: ''
				}
			</Row>
			<Row>
				<div className="jumbotron jumbotron-footer">
					<NextButton disabled={false} variant={nextButtonDisabled ? 'ers-disabled' : 'ers'}
						loading={loading} onClick={() => next()} />
				</div>
			</Row>
		</Container>
	)

}

================
File: src/pages/SystemIntro.jsx
================
import { useEffect, useState } from 'react';
import Card from 'react-bootstrap/Card';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import { useLocation, useNavigate } from 'react-router-dom';
import { getNextStudyStep, sendLog }from '../middleware/api-middleware';
import NextButton from '../widgets/nextButton';
import HeaderJumbotron from '../widgets/headerJumbotron';

export default function SystemIntro(props) {
	const userdata = useLocation().state.user;
	const stepid = useLocation().state.studyStep;
    const [studyStep, setStudyStep] = useState({});

	const [starttime, setStarttime] = useState(new Date());
	const [loading, setLoading] = useState(false);

    const navigate = useNavigate();

    useEffect(() => {
        getNextStudyStep(userdata.study_id, stepid)
            .then((value) => { setStudyStep(value) });
		setStarttime(new Date());
    }, []);


	const handleNextClick = () => {
        // Log the action or do other tasks if necessary
        // sendLog(userdata, studyStep.id, new Date() - new Date(), 'clicked next', 'navigate', null, null);
        
        // Navigate to the next page specified by props.next
        navigate(props.next, {
            state: { user: userdata, studyStep: studyStep.id }
        });
    };

	return (
		<Container>
			<Row>
				<HeaderJumbotron title="System Introduction"
					content="The following is an introduction to the system." />
			</Row>

			<Row>
				<Card bg="light">
					<Card.Body className="instructionblurb">
						<Card.Title>What can you expect?</Card.Title>
						<p>
							Ex Text
						</p>
						<p>
                            Ex Text
						</p>
						<ol>
							<li>
                                Ex Text
							</li>
							<li>
                                Ex Text
							</li>
							<li>
                                Ex Text
							</li>
							<li>Ex Text</li>
						</ol>
						<p>
							Thanks,<br />
							Research Team
						</p>
					</Card.Body>
				</Card>
			</Row>

			<Row>
				<div className="jumbotron jumbotron-footer">
				<NextButton
                        variant="ers"
                        size="lg"
                        className="footer-btn"
                        onClick={handleNextClick}  // Attach the click handler here
                    >
                        Get started
                    </NextButton>
				</div>
			</Row>
		</Container>
	)
}

================
File: src/pages/welcome.jsx
================
import { useEffect, useState } from 'react';
import Button from 'react-bootstrap/Button';
import Card from 'react-bootstrap/Card';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import { useNavigate } from 'react-router-dom';
import {
	createTestUser, createUser, getFirstStudyStep,
	getStudy, sendLog
} from '../middleware/api-middleware';
import InformedConsentModal from '../widgets/dialogs/informedConsent';
import HeaderJumbotron from '../widgets/headerJumbotron';

export default function Welcome(props) {

	const studyID = 2;

	const [show, setShowInformedConsent] = useState(false);
	const [userdata, setUserdata] = useState({});
	const [study, setStudy] = useState({});
	const [studyStep, setStudyStep] = useState({});
	const [starttime, setStarttime] = useState(Date.now());

	const showInformedConsent = () => {
		setShowInformedConsent(!show);
	}

	const navigate = useNavigate();

	useEffect(() => {
		const userProps = ['id', 'condition', 'user_type', 'seen_items'];
		if (userProps.every(item => userdata.hasOwnProperty(item))) {
			sendLog(userdata, studyStep.id, null, starttime - new Date(),
				'user creation', 'study consent', null, null).then(() => {
					navigate(props.next,
						{
							state: {
								user: userdata,
								studyStep: studyStep.id
							}
						});
				})
		}
	}, [userdata, navigate, studyStep, props.next, starttime]);

	useEffect(() => {
		getStudy(studyID).then((studyres: studyres) => { setStudy(studyres) });
		getFirstStudyStep(studyID).then((studyStepRes: studyStepRes) => {
			setStudyStep(studyStepRes);
		});
		setStarttime(new Date());

	}, []);

	const consentCallbackHandler = (consent, condition) => {
		if (consent) {
			// if (condition === 0) {
			// 	createUser('prefCommStudy', study.id)
			// 		.then((response): Promise<user> => response.json())
			// 		.then((user: user) => {
			// 			setUserdata(user);
			// 		})
			// 		.catch((error) => console.log(error));
			// } else {
				createTestUser('prefCommStudy', study.id, condition)
					.then((response): Promise<user> => response.json())
					.then((user: user) => {
						setUserdata(user);
					})
					.catch((error) => console.log(error));
			// }
		}
	}

	return (
		<Container>
			<Row>
				<HeaderJumbotron title="Welcome!"
					content="Thank you for participating in The Peer Recommendation Platform study. Your involvement is crucial for our research." />
			</Row>

			<Row>
				<Card bg="light">
					<Card.Body className="instructionblurb">
						<Card.Title>What to expect?</Card.Title>
						<p>
							<em>Consent Form:</em>
						</p>
						<ol>
							<li>
								Begin by reviewing and signing the consent form.
							</li>
							<li>
								Your participation is voluntary, and you can withdraw at any time.
							</li>
						</ol>
						<p>
							<em>Demographics</em>
						</p>
						<p>
							<em>Pre-Survey:</em>
						</p>
						<ol>
							<li>
								Complete a brief pre-survey to help us understand your background and preferences.
							</li>
							<li>
								This will take approximately 10 to 15 minutes.
							</li>
						</ol>
						<p>
							<em>Introduction to The Peer Recommendation Platform:</em>
						</p>
						<ol>
							<li>
								Learn about The Peer Recommendation Platform, our innovative community based movie recommender system.
							</li>
							<li>
								Understand its purpose and how it will assist you throughout the study.
							</li>
						</ol>
						<p>
							<em>Complete the Study:</em>
						</p>
						<ol>
							<li>
								Navigate through the system following the guided steps.
							</li>
							<li>
								Engage with the features and provide feedback as prompted.
							</li>
						</ol>
						<p>
							<em>Post-Survey:</em>
						</p>
						<ol>
							<li>
								After completing the study steps, you will be directed to a post-survey.
							</li>
							<li>
								Your feedback will be invaluable for improving the system and understanding your experience.
							</li>
						</ol>
						
						<p>
							We appreciate your time and insights. <strong>Let's get started!</strong>
						</p>
					</Card.Body>
				</Card>
			</Row>

			<InformedConsentModal show={show}
				consentCallback={consentCallbackHandler} />
			<Row>
				<div className="jumbotron jumbotron-footer">
					<Button variant="ers" size="lg" className="footer-btn"
						onClick={showInformedConsent}>
						Get started
					</Button>
				</div>
			</Row>
		</Container>
	)
}

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/res/default_movie_icon.svg
================
<?xml version="1.0"?>
<svg height="256px" version="1.1" viewBox="0 0 16 16" width="256px" xmlns="http://www.w3.org/2000/svg" xmlnsSketch="http://www.bohemiancoding.com/sketch/ns" xmlnsXlink="http://www.w3.org/1999/xlink">
	<title />
	<defs />
	<g fill="none" fill-rule="evenodd" id="Icons with numbers" stroke="none" stroke-width="1">
		<g fill="#000000" id="Group" transform="translate(-576.000000, -192.000000)">
			<path d="M577,193 L591,193 L591,208 L577,208 Z M580,194 L580,200 L588,200 L588,194 Z M580,201 L580,207 L588,207 L588,201 Z M578,194 L578,195 L579,195 L579,194 Z M578,196 L578,197 L579,197 L579,196 Z M578,198 L578,199 L579,199 L579,198 Z M578,200 L578,201 L579,201 L579,200 L578,200 Z M578,202 L578,203 L579,203 L579,202 L578,202 Z M578,204 L578,205 L579,205 L579,204 L578,204 Z M578,206 L578,207 L579,207 L579,206 L578,206 Z M589,194 L589,195 L590,195 L590,194 L589,194 Z M589,196 L589,197 L590,197 L590,196 L589,196 Z M589,198 L589,199 L590,199 L590,198 L589,198 Z M589,200 L589,201 L590,201 L590,200 L589,200 Z M589,202 L589,203 L590,203 L590,202 L589,202 Z M589,204 L589,205 L590,205 L590,204 L589,204 Z M589,206 L589,207 L590,207 L590,206 L589,206 Z M589,206" id="Rectangle 249" />
		</g>
	</g>
</svg>

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: src/widgets/dialogs/informedConsent.jsx
================
import React, { useState } from 'react';
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import Modal from "react-bootstrap/Modal";
import Spinner from "react-bootstrap/Spinner";
import { Link } from 'react-router-dom';

export default function InformedConsentModal(props) {
  const [isConsentGiven, setIsConsentGiven] = useState(false);
  const [name, setName] = useState('');
  const [date, setDate] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const condition = Math.floor(Math.random() * 2) + 12;

  const handleConsent = (e) => {
    setIsLoading(true);
    props.consentCallback(isConsentGiven, condition);
  }

  return (
    <Modal show={props.show} dialogClassName="modal-80w" style={{ zIndex: "2050" }}>
      <Modal.Header>
        <Modal.Title>
          Clemson University<br />
          The Peer Recommendation Platform
        </Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <p className='informedConsent-title'>
          Key Information About the Research Study
        </p>
        <p>
          Dr. Bart Knijnenburg is inviting you to volunteer for a 
          research study. Bart  Knijnenburg is an assistant professor 
          at Clemson University conducting the study with  one of his 
          graduate students, Mina Mbodj, at Clemson University. 
        </p>

        <p>
          <span className='informedConsent-bold'>
            Study Purpose:&nbsp;
          </span>
          The purpose of this research is to investigate how a 
          peer-based recommendation system works and the behaviors 
          that it elicits in members of the community. 
        </p>

        <p>
          <span className='informedConsent-bold'>
            Voluntary Consent:&nbsp;
          </span>
          Participation is voluntary, and you have the option to not 
          participate. You will not be punished in any way if you 
          decide not to be in the study  or to stop taking part in the 
          study. 
        </p>

        <p>
          <span className='informedConsent-bold'>
            Activities and Procedures:&nbsp;
          </span>
          You will be provided a consent form that you will have to 
          sign to agree to the terms and conditions. Once you sign the 
          consent form, you will be  asked to complete the pre-survey, 
          read through The Peer Recommendation Platform introduction 
          page. 
        </p>

        <p>
          <span className='informedConsent-bold'>
            Participation Time:&nbsp;
          </span>
          It will take you about 65 minutes to be part of this study. 
        </p>

        <p>
          <span className='informedConsent-bold'>
            Risks and Discomforts:&nbsp;
          </span>
          We do not know of any risks or discomforts to you in this 
          research study. You may opt out of the study at any time if 
          you are not comfortable. 
        </p>
        <p>
          <span className='informedConsent-bold'>
            Possible Benefits:&nbsp;
          </span>
          You may not benefit directly for taking part in this study; 
          however,  we believe that this system will help you help. 
        </p>

        <p className='informedConsent-title'>Incentives</p>
        <p>
          For participating in this user study, you will be 
          compensated with TBD upon successful  completion of the 
          study. 
        </p>

        <p className='informedConsent-title'>
          Audio/Video Recording and Photographs
        </p>
        <p>
        Our study does not ask you to provide personal or identifiable 
        information. No audio or video will be recorded while 
        participants will take the study. 
        </p>

        <p className='informedConsent-title'>
          Equipment and Devices that will be used in Research Study
        </p>
        <p>
          Are required: a computer, Internet browser and internet 
          connection to access the survey and take  the experiment. 
        </p>
        
        <p className='informedConsent-title'>
          Protection of Privacy and Confidentiality
        </p>
        <p>
        The results of this study may be published in scientific 
        journals, professional  publications, or educational 
        presentations. Identifiable information collected during  
        the study will be removed and the de-identified information will 
        not be used or  distributed for future research studies. 
        We might be required to share the information  we collect from 
        you with the Clemson University Office of Research Compliance and  
        the federal Office for Human Research Protections. If this happens, 
        the information  would only be used to find out if we ran this 
        study properly and protected your rights  in the study. 
        </p>

        <p className='informedConsent-title'>
          Contact Information
        </p>
        <p>
          If you have any questions or concerns about your rights in this research study, 
          please  contact the Clemson University Office of Research Compliance (ORC) at 
          864-656- 0636 or <a href="mailto:irb@clemson.edu">irb@clemson.edu</a>. The 
          Clemson IRB will not be able to answer some study specific questions. However, 
          you may contact the Clemson IRB if the research staff  cannot be reached or if 
          you wish to speak with someone other than the research staff. 
        </p>
        <p>
          If you have any study related questions or if any problem arise, please contact
          Dr. Bart Knijnenburg (<a href="mailto:bartk@clemson.edu">bartk@clemson.edu</a>).
          Mina Mbodj <a href="mailto:ambodj@g.clemson.edu">ambodj@g.clemson.edu</a>.
        </p>

        <Form className="consent-form">
          <p className="informedConsent-title">Consent</p>
          <p className="informedConsent-bold">
            By participating in the study, you indicate that you have read the information written
            above, been allowed to ask any questions, and you are voluntarily choosing to take part
            in this research. You do not give up any legal rights by taking part in this research study.
          </p>

          <Form.Group controlId="nameInput">
            <Form.Label>Name:</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter your name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
          </Form.Group>

          <Form.Group controlId="dateInput">
            <Form.Label>Date:</Form.Label>
            <Form.Control
              type="date"
              value={date}
              onChange={(e) => setDate(e.target.value)}
              required
            />
          </Form.Group>

          <Form.Check
            style={{ fontWeight: '500', marginTop: '9px' }}
            label="I consent to being a participant in this study and the use of 
			my educational records  for research purposes. "
            onChange={(evt) => setIsConsentGiven(evt.target.checked)}
            checked={isConsentGiven}
          />
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Link to="/quit">
          <Button variant="ersCancel">
            Exit
          </Button>
        </Link>
        <Button 
          variant="ers" 
          disabled={!isConsentGiven || isLoading}
          onClick={(e) => handleConsent(e)}
        >
          {!isLoading ? 'Continue'
            :
            <>
              <Spinner
                as="span"
                animation="grow"
                size="sm"
                role="status"
                aria-hidden="true"
              />
              Loading...
            </>
          }
        </Button>
      </Modal.Footer>
    </Modal>
  );
}

================
File: src/widgets/headerJumbotron.jsx
================
import DOMPurify from "dompurify";
import parse from "html-react-parser";

export default function HeaderJumbotron(props) {

	const clean = DOMPurify.sanitize(props.content);
	const parsed = parse(clean);

	return (
		<div className="jumbotron">
			<h1 className="header">{props.title}</h1>
			<div style={{ width: "fit-content", margin: "auto", textAlign: "left" }}>
				{parsed}
			</div>
		</div>
	)
}

================
File: src/widgets/nextButton.jsx
================
import Button from 'react-bootstrap/Button';
import Spinner from 'react-bootstrap/Spinner';

export default function NextButton(props) {

	const variant = props.variant ? props.variant : "ers";

	return (
		<Button variant={variant} size="lg" className="nextButton footer-btn"
			disabled={props.disabled} onClick={props.onClick}>
			{!props.loading ? 'Next'
				:
				<>
					<Spinner
						as="span"
						animation="grow"
						size="sm"
						role="status"
						aria-hidden="true"
					/>
					Loading...
				</>
			}
		</Button>
	)
}

export const FooterButton = (props) => {
	return (
		<Button variant="ers" size="lg" className={props.className + " nextButton footer-btn"}
			disabled={props.disabled} onClick={props.onClick}>
			{!props.loading ? props.text
				:
				<>
					<Spinner
						as="span"
						animation="grow"
						size="sm"
						role="status"
						aria-hidden="true"
					/>
					Loading...
				</>
			}
		</Button>
	)
}

================
File: src/widgets/survey/likertBar.jsx
================
import {  useState } from "react";
import FormLabel from "react-bootstrap/FormLabel";

export default function LikertBar(props) {

	const likert = [
		{ id: 1, label: 'Strongly Disagree' },
		{ id: 2, label: 'Disagree' },
		{ id: 3, label: 'Neutral' },
		{ id: 4, label: 'Agree' },
		{ id: 5, label: 'Strongly Agree' }];

	const qgroup = props.surveyquestiongroup;
	const qid = props.qid
	const [selectedValue, setSelectedValue] = useState(undefined);

	const handleRadioChange = (val) => {
		setSelectedValue(val);
		props.changeCallback(qid, val);
	}

	return (
		<div className="checkboxGroup">
			{likert.map((likertval) => {
				return (
					<FormLabel htmlFor={qgroup + "_" + qid + "_" + likertval.id}
						key={qgroup + "_" + qid + "_" + likertval.id}
						className={selectedValue === likertval.id ? "checkboxBtn checkboxBtnChecked" : "checkboxBtn"}>

						<p className="checkboxLbl">{likertval.label}</p>

						<input className="radio-margin" type="radio"
							name={qgroup + "_" + qid + "_" + likertval.id}
							value={likertval.id}
							id={qgroup + "_" + qid + "_" + likertval.id}
							checked={selectedValue === likertval.id}
							onChange={(evt) => handleRadioChange(parseInt(evt.target.value))}
						/>
					</FormLabel>
				);
			}
			)}
		</div>
	)
}

================
File: src/widgets/survey/surveyTemplate.jsx
================
import FormGroup from "react-bootstrap/FormGroup";
import Row from "react-bootstrap/Row";
import LikertBar from "./likertBar";
import { useEffect, useState, useRef } from "react";
import DOMPurify from "dompurify";
import parse from "html-react-parser";

export default function SurveyTemplate(props) {

	const [surveyAnswers, setSurveyAnswers] = useState({});
	const [resBoolSet, setResBoolSet] = useState(new Set());
	const [showUnanswered, setShowUnanswered] = useState(false);
	const [smallestUnanswered, setSmallestUnanswered] = useState(0);
	const topUnanswered = useRef();

	const scroll = () =>
		topUnanswered?.current?.scrollIntoView({ behavior: "smooth" });

	useEffect(() => {
		setSurveyAnswers({});
		setResBoolSet(new Set());
		setSmallestUnanswered(0);
	}, [props.surveyquestions]);

	useEffect(() => {
		setShowUnanswered(props.showUnanswered);
	}, [props.showUnanswered]);


	const parseHTML = (htmlstr) => {
		const clean = DOMPurify.sanitize(htmlstr);
		const parsed = parse(clean);
		return parsed;
	}

	// FIXME this only works the first time. Since, showUnanswered is not 
	// updated, the useEffect is not called again. Fix this by using a
	// callback function.
	useEffect(() => {
		if (showUnanswered) {
			scroll();
		}
	}, [showUnanswered]);

	useEffect(() => {
		if ((Object.keys(surveyAnswers).length === props.surveyquestions.length)
			&& (Object.values(surveyAnswers).every((x) => x !== undefined))) {
			props.submitCallback(surveyAnswers);
		}
	}, [surveyAnswers, props]);

	const valueSelectHandler = (qid, value) => {
		let newResBoolSet = new Set(resBoolSet);
		newResBoolSet.add(qid);

		if (qid <= smallestUnanswered) {
			for (let i = smallestUnanswered + 1; i < props.surveyquestions.length; i++) {
				if (!newResBoolSet.has(i)) {
					setSmallestUnanswered(i);
					break;
				}
			}
		}

		props.logginCallback(qid, value);
		let newAnswers = { ...surveyAnswers };
		newAnswers[qid] = value;
		setSurveyAnswers(newAnswers);
		setResBoolSet(newResBoolSet);
	}

	return (
		<Row>
			{props.surveyquestions.map((question, i) => {
				return (
					<FormGroup key={props.surveyquestiongroup + '_' + i}
						className={resBoolSet.has(i) ?
							"survey-question-block-responded"
							: showUnanswered ?
								"survey-question-block-unanswered"
								: "survey-question-block"}
						ref={i === smallestUnanswered ? topUnanswered : null}>
						<div>
							<p className="surveyQuestionText">
								{parseHTML(question.question)}
							</p>
						</div>
						<LikertBar surveyquestiongroup={props.surveyquestiongroup}
							qid={question.id} changeCallback={valueSelectHandler} />
					</FormGroup>
				)
			})}
		</Row>

	)
}
